{"version":3,"sources":["TreeUtils.js","Node.jsx","Tree.jsx","TopBar.jsx","StatsPanel.jsx","App.jsx","index.js"],"names":["searchNodesAndRemoveById","nodes","id","filt","filter","node","ret","forEach","push","value","children","parentID","topOffset","leftOffset","flattenTree","concat","Object","toConsumableArray","reduce","rsf","child","getTreeHeight","row","arguments","length","undefined","Math","max","dimensionClamp","min","bstInsert","treeViewBox","depth","newNode","random","document","getElementById","top","bottom","left","right","getBoundingClientRect","nodeClone","JSON","parse","stringify","pow","console","error","firstChild","secondChild","searchTreeForID","generateLines","childID","Handle","props","_useDrag3","useDrag","type","side","DragTypes","TOP_HANDLE","BOTTOM_HANDLE","item","forID","for","_useDrag4","slicedToArray","dragRef","preview","_useDrag5","_useDrag6","dragRef2","preview2","useEffect","img","Image","react_default","a","createElement","Fragment","handleHandleClick","style","position","height","className","ref","draggable","onDrag","onDragEnd","onHandleClick","display","viewMode","Node","_useDrag","monitor","NODE","_useDrag2","_useDrop","useDrop","accept","drop","newChild","newParent","stateData","Utils","setLineInProgress","setNodes","setLines","lines","canDrop","customMode","hasParent","bottomHandle","topHandle","lessThanTwoChildren","dropRef","handleHandleDrag","e","clientX","clientY","src","mouseX","pageX","mouseY","pageY","handleHandleDragEnd","key","Node_Handle","onClick","onDragStart","zIndex","map","Tree","_useState","useState","x","y","_useState2","dragOffset","setDragOffset","_useState3","_useState4","lineInProgress","_useReducer","useReducer","forceUpdate","_useState5","_useState6","seed","setSeed","handleNodeClick","l","target","parentNode","handleLineClick","_e$target$id$split","split","_e$target$id$split2","allNodes","tree","apply","childNode","find","setViewMode","removed","line","handleDragStart","nativeEvent","offsetX","offsetY","handleDragEnd","handleDrag","nodeObj","desiredTopOffset","desiredLeftOffset","src_Node","flattenedTree","i","parent","x1","y1","x2","y2","TopBar","inputText","setInputText","traverseMode","setTraverseMode","highlightPreVisitedNode","nodeDiv","classList","add","highlightVisitedNode","unHighlightAllNodes","querySelectorAll","remove","insertBinaryNode","clientWidth","visited","queue","n","shift","includes","insertAVLNode","avlBalance","balancedChild","unshift","leftHeight","rightHeight","balancedLeftChild","balancedRightChild","handleInsertClick","insertBSTNode","log","insertCustomNode","onChange","matches","match","onKeyDown","code","placeholder","name","traverse","_queue","prev","querySelector","setTimeout","StatsPanel","href","rel","App","DndProvider","backend","HTML5Backend","src_TopBar","src_Tree","src_StatsPanel","ReactDOM","createRoot","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.d61a80e8.chunk.js","sourcesContent":["let INITIAL_OFFSET_WIDTH = 200\r\nconst INITIAL_OFFSET_HEIGHT = 80\r\nconst SCALING_FACTOR = 2\r\n\r\n/**\r\n * An object representing a node in a tree\r\n * @typedef {Object} Node\r\n * @property {Number} value - the value of the node\r\n * @property {Number} id - randomly generated ID unique to the node\r\n * @property {Node[]} children an array containing all child nodes of this node\r\n * @property {Number?} parentID the id of the parent of this node, null if no parent\r\n * @property {Number} topOffset represents the vertical position of this node in the treeView\r\n * @property {Number} leftOffset represents the horizontal position of this node in the treeView\r\n */\r\n\r\n/**\r\n * A data structure to represent a parent-child relationship between nodes\r\n * @typedef {Object} Line\r\n * @property {Number} parentID the ID of the parent node in the relationship\r\n * @property {Number} childID the ID of the child node in the relationship\r\n */\r\n\r\n/**\r\n * A data structure to store data relating to a node's handle drag event\r\n * @typedef {Object} LineInProgress\r\n * @property {Node} src the node whose handle is being dragged\r\n * @property {Number} mouseX the current mouse x coordinate\r\n * @property {Number} mouseY the current mouse y coordinate\r\n */\r\n\r\n/**\r\n * Remove the node with the given id from the given list of nodes\r\n * @param {Node[]} nodes\r\n * @param {*} id\r\n * @returns {Node[]} the given list of nodes without the node that has the given ID\r\n */\r\nexport const searchNodesAndRemoveById = (nodes, id) => {\r\n\tlet filt = nodes.filter(node => node.id !== +id)\r\n\tlet ret = []\r\n\tfilt.forEach(node => {\r\n\t\tret.push({\r\n\t\t\tvalue: node.value,\r\n\t\t\tid: node.id,\r\n\t\t\tchildren: searchNodesAndRemoveById(node.children, id),\r\n\t\t\tparentID: node.parentID,\r\n\t\t\ttopOffset: node.topOffset,\r\n\t\t\tleftOffset: node.leftOffset,\r\n\t\t})\r\n\t})\r\n\treturn ret\r\n}\r\n\r\n/**\r\n * Flattens the tree from the given node\r\n * @param {Object} node\r\n * @returns {Node[]} an array containing every node in the tree in one dimension\r\n */\r\nexport const flattenTree = node => {\r\n\treturn [\r\n\t\tnode,\r\n\t\t...node.children.reduce(\r\n\t\t\t(rsf, child) => [...rsf, ...flattenTree(child)],\r\n\t\t\t[]\r\n\t\t),\r\n\t]\r\n}\r\n\r\n/**\r\n * Returns the height of the tree from the given node\r\n * @param {Object} node\r\n * @param {Number} row 1 for default\r\n * @returns {Number} the height of the tree from the given node\r\n */\r\nexport const getTreeHeight = (node, row = 1) => {\r\n\tif (typeof node === \"undefined\") {\r\n\t\treturn row - 1\r\n\t} else if (node.children.length === 0) {\r\n\t\treturn row\r\n\t} else {\r\n\t\treturn node.children.reduce(\r\n\t\t\t(rsf, child) => Math.max(rsf, getTreeHeight(child, row + 1)),\r\n\t\t\t0\r\n\t\t)\r\n\t}\r\n}\r\n\r\n/**\r\n * Clamp the given value between the given minimum and maximum values\r\n * @param {Number} value\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @returns {Number} the number constrained between the upper and lower limits\r\n */\r\nexport const dimensionClamp = (value, min, max) => {\r\n\treturn Math.max(min, Math.min(value, max))\r\n}\r\n\r\n/**\r\n * Insert a new node with the given value into the tree based off of the given node and add connecting lines\r\n * @param {Node} node the base node of the tree to insert the new node into\r\n * @param {Number} value the value of the new node to insert\r\n * @param {Number?} parentID the id of the parent of the current base node, used for recursion\r\n * @param {Number?} depth how far down the current tree the new node is being inserted, used for recursion\r\n * @param {Node} newNode the node to insert, automatically generated but overrideable\r\n * @returns {Node} the original tree with the new node inserted\r\n */\r\nexport const bstInsert = (\r\n\tnode,\r\n\tvalue,\r\n\tparentID = null,\r\n\tdepth = 0,\r\n\tnewNode = {\r\n\t\tvalue: value,\r\n\t\tid: Math.random(),\r\n\t\tchildren: [],\r\n\t\tparentID: parentID,\r\n\t\ttopOffset: node.topOffset + 40,\r\n\t\tleftOffset: node.leftOffset,\r\n\t}\r\n) => {\r\n\tlet treeViewBox\r\n\tif (document.getElementById(\"treeView\") === null) {\r\n\t\ttreeViewBox = { top: 0, bottom: 0, left: 0, right: 0 }\r\n\t} else {\r\n\t\ttreeViewBox = document\r\n\t\t\t.getElementById(\"treeView\")\r\n\t\t\t.getBoundingClientRect()\r\n\t}\r\n\r\n\tconst nodeClone = JSON.parse(JSON.stringify(node))\r\n\r\n\t// Check for duplicate\r\n\tif (newNode.value === nodeClone.value) return nodeClone\r\n\r\n\t// Node has no children\r\n\tif (nodeClone.children.length === 0) {\r\n\t\tnewNode.parentID = node.id\r\n\t\tif (value > node.value) {\r\n\t\t\tnewNode.leftOffset = dimensionClamp(\r\n\t\t\t\tnode.leftOffset +\r\n\t\t\t\t\tINITIAL_OFFSET_WIDTH / SCALING_FACTOR ** depth,\r\n\t\t\t\ttreeViewBox.left,\r\n\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\tnewNode.leftOffset = dimensionClamp(\r\n\t\t\t\tnode.leftOffset -\r\n\t\t\t\t\tINITIAL_OFFSET_WIDTH / SCALING_FACTOR ** depth,\r\n\t\t\t\ttreeViewBox.left,\r\n\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t)\r\n\t\t}\r\n\t\tnewNode.topOffset = dimensionClamp(\r\n\t\t\tnode.topOffset + INITIAL_OFFSET_HEIGHT,\r\n\t\t\ttreeViewBox.top - 25,\r\n\t\t\ttreeViewBox.bottom - 50\r\n\t\t)\r\n\r\n\t\treturn {\r\n\t\t\tvalue: node.value,\r\n\t\t\tid: node.id,\r\n\t\t\tchildren: [newNode],\r\n\t\t\tparentID: node.parentID,\r\n\t\t\ttopOffset: node.topOffset,\r\n\t\t\tleftOffset: node.leftOffset,\r\n\t\t}\r\n\t}\r\n\r\n\t// Node has one child\r\n\telse if (node.children.length === 1) {\r\n\t\tconst child = nodeClone.children[0]\r\n\r\n\t\t// Insert to right on this node\r\n\t\tif (child.value < node.value && node.value < newNode.value) {\r\n\t\t\tnewNode.parentID = node.id\r\n\t\t\tnewNode.leftOffset = dimensionClamp(\r\n\t\t\t\tnode.leftOffset +\r\n\t\t\t\t\tINITIAL_OFFSET_WIDTH / SCALING_FACTOR ** depth,\r\n\t\t\t\ttreeViewBox.left,\r\n\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t)\r\n\t\t\tnewNode.topOffset = dimensionClamp(\r\n\t\t\t\tnode.topOffset + INITIAL_OFFSET_HEIGHT,\r\n\t\t\t\ttreeViewBox.top - 25,\r\n\t\t\t\ttreeViewBox.bottom - 50\r\n\t\t\t)\r\n\r\n\t\t\treturn {\r\n\t\t\t\tvalue: node.value,\r\n\t\t\t\tid: node.id,\r\n\t\t\t\tchildren: [child, newNode],\r\n\t\t\t\tparentID: node.parentID,\r\n\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Insert to left on this node\r\n\t\telse if (newNode.value < node.value && node.value < child.value) {\r\n\t\t\tnewNode.parentID = node.id\r\n\t\t\tnewNode.leftOffset = dimensionClamp(\r\n\t\t\t\tnode.leftOffset -\r\n\t\t\t\t\tINITIAL_OFFSET_WIDTH / SCALING_FACTOR ** depth,\r\n\t\t\t\ttreeViewBox.left,\r\n\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t)\r\n\t\t\tnewNode.topOffset = dimensionClamp(\r\n\t\t\t\tnode.topOffset + INITIAL_OFFSET_HEIGHT,\r\n\t\t\t\ttreeViewBox.top - 25,\r\n\t\t\t\ttreeViewBox.bottom - 50\r\n\t\t\t)\r\n\r\n\t\t\treturn {\r\n\t\t\t\tvalue: node.value,\r\n\t\t\t\tid: node.id,\r\n\t\t\t\tchildren: [newNode, child],\r\n\t\t\t\tparentID: node.parentID,\r\n\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Insert on child node\r\n\t\tif (value === null) {\r\n\t\t\treturn {\r\n\t\t\t\tvalue: node.value,\r\n\t\t\t\tid: node.id,\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\tbstInsert(child, value, node.id, depth + 1, newNode, true),\r\n\t\t\t\t],\r\n\t\t\t\tparentID: node.parentID,\r\n\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tvalue: node.value,\r\n\t\t\tid: node.id,\r\n\t\t\tchildren: [bstInsert(child, value, node.id, depth + 1)],\r\n\t\t\tparentID: node.parentID,\r\n\t\t\ttopOffset: node.topOffset,\r\n\t\t\tleftOffset: node.leftOffset,\r\n\t\t}\r\n\t}\r\n\r\n\t// Node has two children\r\n\telse if (node.children.length === 2) {\r\n\t\tconst firstChild = nodeClone.children[0]\r\n\t\tconst secondChild = nodeClone.children[1]\r\n\r\n\t\t// Insert on right of node (secondChild)\r\n\t\tif (newNode.value > node.value) {\r\n\t\t\tif (value === null) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalue: node.value,\r\n\t\t\t\t\tid: node.id,\r\n\t\t\t\t\tchildren: [\r\n\t\t\t\t\t\tfirstChild,\r\n\t\t\t\t\t\tbstInsert(\r\n\t\t\t\t\t\t\tsecondChild,\r\n\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\tnode.id,\r\n\t\t\t\t\t\t\tdepth + 1,\r\n\t\t\t\t\t\t\tnewNode,\r\n\t\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t],\r\n\t\t\t\t\tparentID: node.parentID,\r\n\t\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tvalue: node.value,\r\n\t\t\t\tid: node.id,\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\tfirstChild,\r\n\t\t\t\t\tbstInsert(secondChild, value, node.id, depth + 1),\r\n\t\t\t\t],\r\n\t\t\t\tparentID: node.parentID,\r\n\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Insert on left of node (firstChild)\r\n\t\telse if (newNode.value < node.value) {\r\n\t\t\tif (value === null) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvalue: node.value,\r\n\t\t\t\t\tid: node.id,\r\n\t\t\t\t\tchildren: [\r\n\t\t\t\t\t\tbstInsert(\r\n\t\t\t\t\t\t\tfirstChild,\r\n\t\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\t\tnode.id,\r\n\t\t\t\t\t\t\tdepth + 1,\r\n\t\t\t\t\t\t\tnewNode,\r\n\t\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\tsecondChild,\r\n\t\t\t\t\t],\r\n\t\t\t\t\tparentID: node.parentID,\r\n\t\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tvalue: node.value,\r\n\t\t\t\tid: node.id,\r\n\t\t\t\tchildren: [\r\n\t\t\t\t\tbstInsert(firstChild, value, node.id, depth + 1),\r\n\t\t\t\t\tsecondChild,\r\n\t\t\t\t],\r\n\t\t\t\tparentID: node.parentID,\r\n\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Node is invalid BST\r\n\telse {\r\n\t\tconsole.error(\"Invalid BST: \")\r\n\t\tconsole.error(node)\r\n\t\treturn node\r\n\t}\r\n}\r\n\r\n/**\r\n * Inserts the given node into the given tree in the first valid position given by breadth first search of the tree\r\n * @param {Node} node the base node of the tree to insert the new node into\r\n * @param {Number} value the value of the new node to insert\r\n * @returns {Node} the initial node with the new node inserted into a subtree\r\n */\r\nexport const binaryInsert = (node, value) => {\r\n\tconst newNode = { value: value, id: Math.random(), children: [] }\r\n\tlet treeViewBox\r\n\tif (document.getElementById(\"treeView\") === null) {\r\n\t\ttreeViewBox = { top: 0, bottom: 0, left: 0, right: 0 }\r\n\t} else {\r\n\t\ttreeViewBox = document\r\n\t\t\t.getElementById(\"treeView\")\r\n\t\t\t.getBoundingClientRect()\r\n\t}\r\n\r\n\tlet visited = []\r\n\tlet queue = []\r\n\r\n\tconst nodeClone = JSON.parse(JSON.stringify(node))\r\n\r\n\tvisited.push(nodeClone)\r\n\tqueue.push(nodeClone)\r\n\r\n\tlet i = 0\r\n\twhile (queue.length > 0) {\r\n\t\tconst n = queue.shift()\r\n\t\ti++\r\n\r\n\t\tif (n.children.length < 2) {\r\n\t\t\tnewNode.parentID = n.id\r\n\t\t\tnewNode.topOffset = dimensionClamp(\r\n\t\t\t\tn.topOffset + INITIAL_OFFSET_HEIGHT,\r\n\t\t\t\ttreeViewBox.top - 25,\r\n\t\t\t\ttreeViewBox.bottom - 50\r\n\t\t\t)\r\n\r\n\t\t\t// Find how deep in the tree we are inserting this node\r\n\t\t\tlet depth = 0\r\n\t\t\twhile (i > 0) {\r\n\t\t\t\ti -= 2 ** depth\r\n\t\t\t\tdepth++\r\n\t\t\t}\r\n\r\n\t\t\t// If no child is present, insert to the left\r\n\t\t\tif (n.children.length === 0) {\r\n\t\t\t\tnewNode.leftOffset = dimensionClamp(\r\n\t\t\t\t\tn.leftOffset -\r\n\t\t\t\t\t\tINITIAL_OFFSET_WIDTH / SCALING_FACTOR ** (depth - 1),\r\n\t\t\t\t\ttreeViewBox.left,\r\n\t\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t// One child, insertion side varies\r\n\t\t\telse {\r\n\t\t\t\t// Present child is to the right, insert to the left\r\n\t\t\t\tif (n.children[0].leftOffset > n.leftOffset) {\r\n\t\t\t\t\tnewNode.leftOffset = dimensionClamp(\r\n\t\t\t\t\t\tn.leftOffset -\r\n\t\t\t\t\t\t\tINITIAL_OFFSET_WIDTH /\r\n\t\t\t\t\t\t\t\tSCALING_FACTOR ** (depth - 1),\r\n\t\t\t\t\t\ttreeViewBox.left,\r\n\t\t\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t// Present child is to the left, insert to the right\r\n\t\t\t\telse {\r\n\t\t\t\t\tnewNode.leftOffset = dimensionClamp(\r\n\t\t\t\t\t\tn.leftOffset +\r\n\t\t\t\t\t\t\tINITIAL_OFFSET_WIDTH /\r\n\t\t\t\t\t\t\t\tSCALING_FACTOR ** (depth - 1),\r\n\t\t\t\t\t\ttreeViewBox.left,\r\n\t\t\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tn.children.push(newNode)\r\n\t\t\tbreak\r\n\t\t}\r\n\r\n\t\tn.children.forEach(child => {\r\n\t\t\tif (!visited.includes(child)) {\r\n\t\t\t\tvisited.push(child)\r\n\t\t\t\tqueue.push(child)\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\treturn nodeClone\r\n}\r\n\r\n/**\r\n * Returns the node with the given ID if it is in the tree stemming from the given node (depth first search)\r\n * @param {Node} node the node to search all subtrees of\r\n * @param {Number} id the ID to search for\r\n * @returns {Node} the node with the given ID if it is in the tree stemming from the given node (depth first search)\r\n */\r\nexport const searchTreeForID = (node, id) => {\r\n\tif (node === undefined) return null\r\n\tif (node.id === id) return node\r\n\telse\r\n\t\treturn node.children.reduce(\r\n\t\t\t(rsf, child) => (rsf !== null ? rsf : searchTreeForID(child, id)),\r\n\t\t\tnull\r\n\t\t)\r\n}\r\n\r\n/**\r\n * Performs any necessary rotations on an AVL tree and all subtrees\r\n * @param {Node} node the node to balance the subtrees of\r\n * @returns {Node} the given node and all subtrees balanced to match AVL tree format\r\n */\r\nexport const avlBalance = node => {\r\n\tif (node.children.length === 0) {\r\n\t\treturn node\r\n\t} else if (node.children.length === 1) {\r\n\t\tlet nodeClone = JSON.parse(JSON.stringify(node))\r\n\t\t// Balance the subtree\r\n\t\t//const balancedChild = avlBalance(nodeClone.children[0])\r\n\t\tconst balancedChild = nodeClone.children[0]\r\n\t\t// Perform rotation if necessary\r\n\t\tif (getTreeHeight(balancedChild) > 1) {\r\n\t\t\tbalancedChild.parentID = node.parentID\r\n\t\t\tnodeClone.children = []\r\n\t\t\t// Branch right\r\n\t\t\tif (balancedChild.value > nodeClone.value) {\r\n\t\t\t\t// Two children\r\n\t\t\t\tif (balancedChild.children.length === 2) {\r\n\t\t\t\t\t// Insert nodeClone to left grandchild\r\n\t\t\t\t\tnodeClone.parentID = balancedChild.children[0].id\r\n\t\t\t\t\tbalancedChild.children[0].children.push(nodeClone)\r\n\t\t\t\t}\r\n\t\t\t\t// Branch right again\r\n\t\t\t\telse if (\r\n\t\t\t\t\tbalancedChild.children[0].value > balancedChild.value\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Insert nodeClone to the left\r\n\t\t\t\t\tnodeClone.parentID = balancedChild.id\r\n\t\t\t\t\tbalancedChild.children.unshift(nodeClone)\r\n\t\t\t\t}\r\n\t\t\t\t// Branch left this time\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Insert nodeClone to grandchild\r\n\t\t\t\t\tnodeClone.parentID = balancedChild.children[0].id\r\n\t\t\t\t\tbalancedChild.children[0].children.push(nodeClone)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Branch left\r\n\t\t\telse {\r\n\t\t\t\t// Two children\r\n\t\t\t\tif (balancedChild.children.length === 2) {\r\n\t\t\t\t\t// Insert nodeClone to right grandchild\r\n\t\t\t\t\tnodeClone.parentID = balancedChild.children[1].id\r\n\t\t\t\t\tbalancedChild.children[1].children.push(nodeClone)\r\n\t\t\t\t}\r\n\t\t\t\t// Branch right this time\r\n\t\t\t\telse if (\r\n\t\t\t\t\tbalancedChild.children[0].value > balancedChild.value\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Insert nodeClone to grandchild\r\n\t\t\t\t\tnodeClone.parentID = balancedChild.children[0].id\r\n\t\t\t\t\tbalancedChild.children[0].children.push(nodeClone)\r\n\t\t\t\t}\r\n\t\t\t\t// Branch left again\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Insert nodeClone to the right\r\n\t\t\t\t\tnodeClone.parentID = balancedChild.id\r\n\t\t\t\t\tbalancedChild.children.push(nodeClone)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn avlBalance(balancedChild)\r\n\t\t}\r\n\t\t// No rotation needed\r\n\t\telse {\r\n\t\t\treturn nodeClone\r\n\t\t}\r\n\t} else if (node.children.length === 2) {\r\n\t\tconst nodeClone = JSON.parse(JSON.stringify(node))\r\n\r\n\t\t// Balance each subtree\r\n\t\tconst balancedLeftChild = avlBalance(nodeClone.children[0])\r\n\t\tconst balancedRightChild = avlBalance(nodeClone.children[1])\r\n\r\n\t\tlet leftHeight, rightHeight\r\n\t\tif (typeof balancedLeftChild === \"undefined\") {\r\n\t\t\tleftHeight = 0\r\n\t\t} else {\r\n\t\t\tleftHeight = getTreeHeight(balancedLeftChild)\r\n\t\t}\r\n\t\tif (typeof balancedRightChild === \"undefined\") {\r\n\t\t\trightHeight = 0\r\n\t\t} else {\r\n\t\t\trightHeight = getTreeHeight(balancedRightChild)\r\n\t\t}\r\n\r\n\t\t// Left heavy\r\n\t\tif (leftHeight - rightHeight > 1) {\r\n\t\t\tbalancedLeftChild.parentID = node.parentID\r\n\t\t\tnodeClone.children = nodeClone.children.filter(\r\n\t\t\t\tchild => child.id !== balancedLeftChild.id\r\n\t\t\t)\r\n\r\n\t\t\treturn avlBalance(\r\n\t\t\t\tbstInsert(balancedLeftChild, null, null, 0, nodeClone)\r\n\t\t\t)\r\n\t\t}\r\n\t\t// Right heavy\r\n\t\telse if (rightHeight - leftHeight > 1) {\r\n\t\t\tbalancedRightChild.parentID = node.parentID\r\n\t\t\tnodeClone.children = nodeClone.children.filter(\r\n\t\t\t\tchild => child.id !== balancedRightChild.id\r\n\t\t\t)\r\n\r\n\t\t\tconst inserted = bstInsert(\r\n\t\t\t\tbalancedRightChild,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull,\r\n\t\t\t\t0,\r\n\t\t\t\tnodeClone\r\n\t\t\t)\r\n\t\t\treturn avlBalance(inserted)\r\n\t\t}\r\n\t\t// Just right\r\n\t\telse {\r\n\t\t\tnodeClone.children = [balancedLeftChild, balancedRightChild]\r\n\t\t\treturn nodeClone\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const generateLines = node => {\r\n\treturn node.children.reduce(\r\n\t\t(rsf, child) => [\r\n\t\t\t...rsf,\r\n\t\t\t{ parentID: node.id, childID: child.id },\r\n\t\t\t...generateLines(child),\r\n\t\t],\r\n\t\t[]\r\n\t)\r\n}\r\n","import React, { useEffect } from \"react\"\r\nimport { useDrag, useDrop } from \"react-dnd\"\r\nimport { DragTypes } from \"./App\"\r\nimport * as Utils from \"./TreeUtils\"\r\n\r\nconst Node = props => {\r\n\tconst [, dragRef, preview] = useDrag(monitor => ({\r\n\t\ttype: DragTypes.NODE,\r\n\t}))\r\n\tconst [, dropRef] = useDrop(() => ({\r\n\t\taccept: [DragTypes.BOTTOM_HANDLE, DragTypes.TOP_HANDLE],\r\n\t\tdrop: item => {\r\n\t\t\tlet newChild, newParent\r\n\t\t\tif (item.type === DragTypes.BOTTOM_HANDLE) {\r\n\t\t\t\t// bottom handle to top handle\r\n\t\t\t\tnewChild = props.stateData.nodes.reduce(\r\n\t\t\t\t\t(rsf, node) =>\r\n\t\t\t\t\t\trsf !== null\r\n\t\t\t\t\t\t\t? rsf\r\n\t\t\t\t\t\t\t: Utils.searchTreeForID(node, props.for.id),\r\n\t\t\t\t\tnull\r\n\t\t\t\t)\r\n\t\t\t\tnewParent = props.stateData.nodes.reduce(\r\n\t\t\t\t\t(rsf, node) =>\r\n\t\t\t\t\t\trsf !== null\r\n\t\t\t\t\t\t\t? rsf\r\n\t\t\t\t\t\t\t: Utils.searchTreeForID(node, item.forID),\r\n\t\t\t\t\tnull\r\n\t\t\t\t)\r\n\t\t\t\tprops.stateData.setLineInProgress()\r\n\t\t\t} else if (item.type === DragTypes.TOP_HANDLE) {\r\n\t\t\t\t// top handle to bottom handle\r\n\t\t\t\tnewChild = props.stateData.nodes.reduce(\r\n\t\t\t\t\t(rsf, node) =>\r\n\t\t\t\t\t\trsf !== null\r\n\t\t\t\t\t\t\t? rsf\r\n\t\t\t\t\t\t\t: Utils.searchTreeForID(node, item.forID),\r\n\t\t\t\t\tnull\r\n\t\t\t\t)\r\n\t\t\t\tnewParent = props.stateData.nodes.reduce(\r\n\t\t\t\t\t(rsf, node) =>\r\n\t\t\t\t\t\trsf !== null\r\n\t\t\t\t\t\t\t? rsf\r\n\t\t\t\t\t\t\t: Utils.searchTreeForID(node, props.for.id),\r\n\t\t\t\t\tnull\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tnewChild.parentID = item.forID\r\n\t\t\tnewParent.children.push(newChild)\r\n\r\n\t\t\tprops.stateData.setNodes(\r\n\t\t\t\tprops.stateData.nodes.filter(node => node.id !== newChild.id)\r\n\t\t\t)\r\n\t\t\tprops.stateData.setLines([\r\n\t\t\t\t...props.stateData.lines,\r\n\t\t\t\t{ parentID: newParent.id, childID: newChild.id },\r\n\t\t\t])\r\n\t\t\tprops.stateData.setLineInProgress()\r\n\t\t},\r\n\t\tcanDrop: item => {\r\n\t\t\tconst customMode = props.viewMode === \"custom\"\r\n\t\t\tconst hasParent = props.for.parentID !== null\r\n\t\t\tconst bottomHandle = item.type === DragTypes.BOTTOM_HANDLE\r\n\t\t\tconst topHandle = item.type === DragTypes.TOP_HANDLE\r\n\t\t\tconst lessThanTwoChildren = props.for.children.length < 2\r\n\t\t\tconst wouldFormLoop = Utils.searchTreeForID(props.for, item.forID)\r\n\r\n\t\t\tif (wouldFormLoop) return false\r\n\t\t\telse if (bottomHandle && !hasParent) return true\r\n\t\t\telse if (topHandle && (customMode || lessThanTwoChildren))\r\n\t\t\t\treturn true\r\n\t\t\telse return false\r\n\t\t},\r\n\t}))\r\n\r\n\t// Clear drag preview images\r\n\tuseEffect(() => {\r\n\t\tconst img = new Image()\r\n\t\tpreview(img)\r\n\t}, [])\r\n\r\n\tconst handleHandleDrag = e => {\r\n\t\t// This if statement filters out the last drag event which has coordinates (0, 0)\r\n\t\tif (!(e.clientX === 0 && e.clientY === 0)) {\r\n\t\t\tconst treeViewBox = document\r\n\t\t\t\t.getElementById(\"treeView\")\r\n\t\t\t\t.getBoundingClientRect()\r\n\r\n\t\t\tprops.stateData.setLineInProgress({\r\n\t\t\t\tsrc: props.for,\r\n\t\t\t\tmouseX: Utils.dimensionClamp(\r\n\t\t\t\t\te.pageX,\r\n\t\t\t\t\ttreeViewBox.left,\r\n\t\t\t\t\ttreeViewBox.right\r\n\t\t\t\t),\r\n\t\t\t\tmouseY: Utils.dimensionClamp(\r\n\t\t\t\t\te.pageY - 25,\r\n\t\t\t\t\ttreeViewBox.top,\r\n\t\t\t\t\ttreeViewBox.bottom\r\n\t\t\t\t),\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleHandleDragEnd = () => {\r\n\t\tprops.stateData.setLineInProgress()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<React.Fragment key={props.for.id + \"fragment\"}>\r\n\t\t\t<div\r\n\t\t\t\tid={props.for.id}\r\n\t\t\t\tclassName={\"node\"}\r\n\t\t\t\tstyle={{ top: props.for.topOffset, left: props.for.leftOffset }}\r\n\t\t\t>\r\n\t\t\t\t<Handle\r\n\t\t\t\t\tfor={props.for}\r\n\t\t\t\t\tside=\"top\"\r\n\t\t\t\t\tonDrag={handleHandleDrag}\r\n\t\t\t\t\tonDragEnd={handleHandleDragEnd}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={dropRef}\r\n\t\t\t\t\tstyle={{ position: \"relative\", top: \"-16px\" }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<p\r\n\t\t\t\t\t\tclassName={\"nodeText row\" + props.row}\r\n\t\t\t\t\t\tdraggable=\"true\"\r\n\t\t\t\t\t\tonClick={props.onClick}\r\n\t\t\t\t\t\tonDrag={props.onDrag}\r\n\t\t\t\t\t\tonDragStart={props.onDragStart}\r\n\t\t\t\t\t\tonDragEnd={props.onDragEnd}\r\n\t\t\t\t\t\tstyle={{ zIndex: \"1\" }}\r\n\t\t\t\t\t\tref={dragRef}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{props.for.value}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Handle\r\n\t\t\t\t\tfor={props.for}\r\n\t\t\t\t\tside=\"bottom\"\r\n\t\t\t\t\tonDrag={handleHandleDrag}\r\n\t\t\t\t\tonDragEnd={handleHandleDragEnd}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\r\n\t\t\t{props.for.children.map(value => (\r\n\t\t\t\t<Node\r\n\t\t\t\t\tonClick={props.onClick}\r\n\t\t\t\t\tonDrag={props.onDrag}\r\n\t\t\t\t\tonDragStart={props.onDragStart}\r\n\t\t\t\t\tonDragEnd={props.onDragEnd}\r\n\t\t\t\t\tfor={value}\r\n\t\t\t\t\trow={props.row + 1}\r\n\t\t\t\t\tkey={value.id + \"childnode\"}\r\n\t\t\t\t\tviewMode={props.viewMode}\r\n\t\t\t\t\tstateData={props.stateData}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nconst Handle = props => {\r\n\tconst [, dragRef, preview] = useDrag(() => ({\r\n\t\ttype:\r\n\t\t\tprops.side === \"top\"\r\n\t\t\t\t? DragTypes.TOP_HANDLE\r\n\t\t\t\t: DragTypes.BOTTOM_HANDLE,\r\n\t\titem: {\r\n\t\t\ttype:\r\n\t\t\t\tprops.side === \"top\"\r\n\t\t\t\t\t? DragTypes.TOP_HANDLE\r\n\t\t\t\t\t: DragTypes.BOTTOM_HANDLE,\r\n\t\t\tforID: props.for.id,\r\n\t\t},\r\n\t}))\r\n\tconst [, dragRef2, preview2] = useDrag(() => ({\r\n\t\ttype:\r\n\t\t\tprops.side === \"top\"\r\n\t\t\t\t? DragTypes.TOP_HANDLE\r\n\t\t\t\t: DragTypes.BOTTOM_HANDLE,\r\n\t\titem: {\r\n\t\t\ttype:\r\n\t\t\t\tprops.side === \"top\"\r\n\t\t\t\t\t? DragTypes.TOP_HANDLE\r\n\t\t\t\t\t: DragTypes.BOTTOM_HANDLE,\r\n\t\t\tforID: props.for.id,\r\n\t\t},\r\n\t}))\r\n\r\n\t// Clear drag preview images\r\n\tuseEffect(() => {\r\n\t\tconst img = new Image()\r\n\t\tpreview(img)\r\n\t\tpreview2(img)\r\n\t}, [])\r\n\r\n\tconst createTopHandle = () => {\r\n\t\treturn (\r\n\t\t\t<div style={{ position: \"relative\", height: \"16px\", top: \"-12px\" }}>\r\n\t\t\t\t{props.for.parentID === null && (\r\n\t\t\t\t\t<div className=\"handle top\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"handle\"\r\n\t\t\t\t\t\t\tref={dragRef}\r\n\t\t\t\t\t\t\tdraggable\r\n\t\t\t\t\t\t\tonDrag={props.onDrag}\r\n\t\t\t\t\t\t\tonDragEnd={props.onDragEnd}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tconst createBottomHandles = () => {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tposition: \"relative\",\r\n\t\t\t\t\theight: \"16px\",\r\n\t\t\t\t\ttop: \"-20px\",\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{(props.viewMode === \"custom\" ||\r\n\t\t\t\t\tprops.for.children.length === 1) && (\r\n\t\t\t\t\t<div className=\"handle bottom\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"handle\"\r\n\t\t\t\t\t\t\tref={dragRef}\r\n\t\t\t\t\t\t\tdraggable\r\n\t\t\t\t\t\t\tonDrag={props.onDrag}\r\n\t\t\t\t\t\t\tonDragEnd={props.onDragEnd}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t{props.viewMode !== \"custom\" &&\r\n\t\t\t\t\tprops.for.children.length === 0 && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<div className=\"handle bottom\">\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclassName=\"handle\"\r\n\t\t\t\t\t\t\t\t\tref={dragRef}\r\n\t\t\t\t\t\t\t\t\tdraggable\r\n\t\t\t\t\t\t\t\t\tonDrag={props.onDrag}\r\n\t\t\t\t\t\t\t\t\tonDragEnd={props.onDragEnd}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"handle bottom\">\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tclassName=\"handle\"\r\n\t\t\t\t\t\t\t\t\tref={dragRef2}\r\n\t\t\t\t\t\t\t\t\tdraggable\r\n\t\t\t\t\t\t\t\t\tonDrag={props.onDrag}\r\n\t\t\t\t\t\t\t\t\tonDragEnd={props.onDragEnd}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{props.side === \"top\" && createTopHandle(props.handleHandleClick)}\r\n\t\t\t{props.side === \"bottom\" &&\r\n\t\t\t\tcreateBottomHandles(props.onHandleClick)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Node\r\n","import React, { useReducer, useState } from \"react\"\r\nimport * as Utils from \"./TreeUtils\"\r\nimport Node from \"./Node\"\r\nimport { useEffect } from \"react\"\r\n\r\nconst Tree = props => {\r\n\tconst [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })\r\n\tconst [lineInProgress, setLineInProgress] = useState()\r\n\tconst [, forceUpdate] = useReducer(x => x + 1, 0)\r\n\t// Seed ensures that all nodes re-render when a new node is added to preserve consistency in their props\r\n\tconst [seed, setSeed] = useState(Math.random())\r\n\r\n\tconst handleNodeClick = e => {\r\n\t\tprops.setLines(\r\n\t\t\tprops.lines.filter(\r\n\t\t\t\tl =>\r\n\t\t\t\t\tl.parentID !== +e.target.parentNode.parentNode.id &&\r\n\t\t\t\t\tl.childID !== +e.target.parentNode.parentNode.id\r\n\t\t\t)\r\n\t\t)\r\n\t\tprops.setNodes(\r\n\t\t\tUtils.searchNodesAndRemoveById(\r\n\t\t\t\tprops.nodes,\r\n\t\t\t\te.target.parentNode.parentNode.id\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\tconst handleLineClick = e => {\r\n\t\t// Find IDs of parent and child nodes connecting to the clicked line\r\n\t\tconst [parentID, childID] = e.target.id.split(\"-\")\r\n\t\t// Since there is no guarantee we have a structured tree, gather all nodes in an array\r\n\t\tlet allNodes = []\r\n\t\tprops.nodes.forEach(tree => allNodes.push(...Utils.flattenTree(tree)))\r\n\t\t// Find node object corresponding to the child connected to the clicked line\r\n\t\tconst childNode = allNodes.find(node => node.id === +childID)\r\n\r\n\t\t// Switch viewMode if currently in a structured tree mode\r\n\t\tif (\r\n\t\t\tprops.viewMode === \"bst\" ||\r\n\t\t\tprops.viewMode === \"avl\" ||\r\n\t\t\tprops.viewMode === \"redblack\" ||\r\n\t\t\tprops.viewMode === \"binary\"\r\n\t\t) {\r\n\t\t\tprops.setViewMode(\"custom\")\r\n\t\t}\r\n\t\t// Re-structure the nodes state and remove the clicked line\r\n\t\tconst removed = Utils.searchNodesAndRemoveById(props.nodes, childID)\r\n\t\tchildNode.parentID = null\r\n\t\tprops.setNodes([...removed, childNode])\r\n\t\tprops.setLines(\r\n\t\t\tprops.lines.filter(\r\n\t\t\t\tline => line.childID !== +childID || line.parentID !== +parentID\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\tconst handleLineInProgressClick = () => {\r\n\t\t// This shouldn't be necessary, but it is here just in case\r\n\t\tsetLineInProgress()\r\n\t}\r\n\r\n\tconst handleDragStart = e => {\r\n\t\tsetDragOffset({\r\n\t\t\tx: e.nativeEvent.offsetX,\r\n\t\t\ty: e.nativeEvent.offsetY,\r\n\t\t})\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSeed(Math.random())\r\n\t}, [props.nodes])\r\n\r\n\tconst handleDragEnd = e => {}\r\n\r\n\tconst handleDrag = e => {\r\n\t\t// This if statement filters out the last drag event which has coordinates (0, 0)\r\n\t\tif (!(e.clientX === 0 && e.clientY === 0)) {\r\n\t\t\t// Find the moved node in the tree and update its position\r\n\t\t\tlet allNodes = []\r\n\t\t\tprops.nodes.forEach(tree =>\r\n\t\t\t\tallNodes.push(...Utils.flattenTree(tree))\r\n\t\t\t)\r\n\t\t\tconst nodeObj = allNodes.find(\r\n\t\t\t\tnode => node.id === +e.target.parentNode.parentNode.id\r\n\t\t\t)\r\n\r\n\t\t\t// Keep the node in the treeView area\r\n\t\t\tconst desiredTopOffset = e.pageY - dragOffset.y - 25\r\n\t\t\tconst desiredLeftOffset = e.pageX - dragOffset.x\r\n\t\t\tconst treeViewBox = document\r\n\t\t\t\t.getElementById(\"treeView\")\r\n\t\t\t\t.getBoundingClientRect()\r\n\t\t\tnodeObj.topOffset = Utils.dimensionClamp(\r\n\t\t\t\tdesiredTopOffset,\r\n\t\t\t\ttreeViewBox.top - 25,\r\n\t\t\t\ttreeViewBox.bottom - 50\r\n\t\t\t)\r\n\t\t\tnodeObj.leftOffset = Utils.dimensionClamp(\r\n\t\t\t\tdesiredLeftOffset,\r\n\t\t\t\ttreeViewBox.left,\r\n\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t)\r\n\r\n\t\t\t// Re-render the moved node\r\n\t\t\tforceUpdate()\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id=\"tree\">\r\n\t\t\t<div id=\"treeView\">\r\n\t\t\t\t{props.nodes.map(value => (\r\n\t\t\t\t\t<Node\r\n\t\t\t\t\t\tonClick={handleNodeClick}\r\n\t\t\t\t\t\tonDrag={handleDrag}\r\n\t\t\t\t\t\tonDragStart={handleDragStart}\r\n\t\t\t\t\t\tonDragEnd={handleDragEnd}\r\n\t\t\t\t\t\tfor={value}\r\n\t\t\t\t\t\trow={1}\r\n\t\t\t\t\t\tkey={value.id + \"#\" + seed}\r\n\t\t\t\t\t\tviewMode={props.viewMode}\r\n\t\t\t\t\t\tstateData={{\r\n\t\t\t\t\t\t\tnodes: props.nodes,\r\n\t\t\t\t\t\t\tsetNodes: props.setNodes,\r\n\t\t\t\t\t\t\tlines: props.lines,\r\n\t\t\t\t\t\t\tsetLines: props.setLines,\r\n\t\t\t\t\t\t\tsetLineInProgress: setLineInProgress,\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t\t<svg>\r\n\t\t\t\t\t{props.lines.map(l => {\r\n\t\t\t\t\t\t// Flatten every tree on the page\r\n\t\t\t\t\t\tlet flattenedTree = []\r\n\t\t\t\t\t\tfor (let i = 0; i < props.nodes.length; i++) {\r\n\t\t\t\t\t\t\tflattenedTree.push(\r\n\t\t\t\t\t\t\t\t...Utils.flattenTree(props.nodes[i])\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst parent = flattenedTree.find(\r\n\t\t\t\t\t\t\tnode => node.id === l.parentID\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\tconst child = flattenedTree.find(\r\n\t\t\t\t\t\t\tnode => node.id === l.childID\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\tif (parent !== undefined && child !== undefined) {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<line\r\n\t\t\t\t\t\t\t\t\tonClick={handleLineClick}\r\n\t\t\t\t\t\t\t\t\tx1={parent.leftOffset + 25}\r\n\t\t\t\t\t\t\t\t\ty1={parent.topOffset + 12}\r\n\t\t\t\t\t\t\t\t\tx2={child.leftOffset + 25}\r\n\t\t\t\t\t\t\t\t\ty2={child.topOffset + 12}\r\n\t\t\t\t\t\t\t\t\tclassName=\"line\"\r\n\t\t\t\t\t\t\t\t\tid={l.parentID + \"-\" + l.childID}\r\n\t\t\t\t\t\t\t\t\tkey={l.parentID + \"-\" + l.childID}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<React.Fragment\r\n\t\t\t\t\t\t\t\tkey={l.parentID + \"-\" + l.childID + \":fragment\"}\r\n\t\t\t\t\t\t\t></React.Fragment>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\r\n\t\t\t\t\t{lineInProgress !== undefined && (\r\n\t\t\t\t\t\t<line\r\n\t\t\t\t\t\t\tonClick={handleLineInProgressClick}\r\n\t\t\t\t\t\t\tx1={lineInProgress.src.leftOffset + 25}\r\n\t\t\t\t\t\t\ty1={lineInProgress.src.topOffset + 12}\r\n\t\t\t\t\t\t\tx2={lineInProgress.mouseX}\r\n\t\t\t\t\t\t\ty2={lineInProgress.mouseY}\r\n\t\t\t\t\t\t\tclassName=\"line inProgress\"\r\n\t\t\t\t\t\t\tkey={\"mouse-drag-\" + lineInProgress.src.id}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</svg>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Tree\r\n","import React, { useState } from \"react\"\r\nimport * as Utils from \"./TreeUtils\"\r\n\r\nconst TopBar = props => {\r\n\tconst [inputText, setInputText] = useState(\"\")\r\n\tconst [traverseMode, setTraverseMode] = useState(\"pre-order\")\r\n\r\n\tconst ANIMATION_TIMEOUT = 1000\r\n\r\n\tconst highlightPreVisitedNode = id => {\r\n\t\tconst nodeDiv = document.getElementById(id)\r\n\t\tif (nodeDiv !== null) {\r\n\t\t\tnodeDiv.children[1].firstChild.classList.add(\"pre-visit\")\r\n\t\t}\r\n\t}\r\n\tconst highlightVisitedNode = id => {\r\n\t\tconst nodeDiv = document.getElementById(id)\r\n\t\tif (nodeDiv !== null) {\r\n\t\t\tnodeDiv.children[1].firstChild.classList.add(\"visit\")\r\n\t\t}\r\n\t}\r\n\r\n\tconst unHighlightAllNodes = () => {\r\n\t\tdocument.querySelectorAll(\".pre-visit\").forEach(node => {\r\n\t\t\tnode.classList.remove(\"pre-visit\")\r\n\t\t})\r\n\t\tdocument.querySelectorAll(\".visit\").forEach(node => {\r\n\t\t\tnode.classList.remove(\"visit\")\r\n\t\t})\r\n\t\tdocument.querySelectorAll(\".post-visit\").forEach(node => {\r\n\t\t\tnode.classList.remove(\"post-visit\")\r\n\t\t})\r\n\t}\r\n\r\n\tconst traverse = _queue => {\r\n\t\t// Since we will be modifying queue with shift() and unshift(),\r\n\t\t// we need to copy its contents by value so we don't break anything\r\n\t\t// outside of this function\r\n\t\tlet queue = JSON.parse(JSON.stringify(_queue))\r\n\r\n\t\tconst prev = document.querySelector(\".visit\")\r\n\t\tif (prev !== null) {\r\n\t\t\tprev.classList.remove(\"visit\")\r\n\t\t\tprev.classList.add(\"post-visit\")\r\n\t\t}\r\n\r\n\t\tif (queue.length === 0) {\r\n\t\t\tsetTimeout(unHighlightAllNodes, ANIMATION_TIMEOUT)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet node = queue.shift()\r\n\r\n\t\tif (traverseMode === \"pre-order\") {\r\n\t\t\tif (\r\n\t\t\t\ttypeof node.children !== \"undefined\" &&\r\n\t\t\t\tnode.children.length === 2\r\n\t\t\t) {\r\n\t\t\t\tqueue.unshift(node.children[1])\r\n\t\t\t\thighlightPreVisitedNode(node.children[1].id)\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\ttypeof node.children !== \"undefined\" &&\r\n\t\t\t\tnode.children.length > 0\r\n\t\t\t) {\r\n\t\t\t\tqueue.unshift(node.children[0])\r\n\t\t\t\thighlightPreVisitedNode(node.children[0].id)\r\n\t\t\t}\r\n\t\t\t//visit node\r\n\t\t\thighlightVisitedNode(node.id)\r\n\t\t} else if (traverseMode === \"in-order\") {\r\n\t\t\tif (\r\n\t\t\t\ttypeof node.children !== \"undefined\" &&\r\n\t\t\t\tnode.children.length === 2\r\n\t\t\t) {\r\n\t\t\t\tqueue.unshift(node.children[1])\r\n\t\t\t\thighlightPreVisitedNode(node.children[1].id)\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\ttypeof node.children !== \"undefined\" &&\r\n\t\t\t\tnode.children.length > 0\r\n\t\t\t) {\r\n\t\t\t\t//queue node for later\r\n\t\t\t\tqueue.unshift({\r\n\t\t\t\t\tid: node.id,\r\n\t\t\t\t\tvalue: node.value,\r\n\t\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\t\tchildren: [],\r\n\t\t\t\t})\r\n\t\t\t\thighlightPreVisitedNode(node.id)\r\n\r\n\t\t\t\t//queue left subtree with higher priority\r\n\t\t\t\tqueue.unshift(node.children[0])\r\n\t\t\t\thighlightPreVisitedNode(node.children[0].id)\r\n\t\t\t} else {\r\n\t\t\t\t//visit node\r\n\t\t\t\thighlightVisitedNode(node.id)\r\n\t\t\t}\r\n\t\t} else if (traverseMode === \"post-order\") {\r\n\t\t\tif (\r\n\t\t\t\ttypeof node.children !== \"undefined\" &&\r\n\t\t\t\tnode.children.length > 0\r\n\t\t\t) {\r\n\t\t\t\t//queue node for later\r\n\t\t\t\tqueue.unshift({\r\n\t\t\t\t\tid: node.id,\r\n\t\t\t\t\tvalue: node.value,\r\n\t\t\t\t\tleftOffset: node.leftOffset,\r\n\t\t\t\t\ttopOffset: node.topOffset,\r\n\t\t\t\t\tchildren: [],\r\n\t\t\t\t})\r\n\t\t\t\thighlightPreVisitedNode(node.id)\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\ttypeof node.children !== \"undefined\" &&\r\n\t\t\t\t\tnode.children.length === 2\r\n\t\t\t\t) {\r\n\t\t\t\t\t// queue right subtree before node if applicable\r\n\t\t\t\t\tqueue.unshift(node.children[1])\r\n\t\t\t\t\thighlightPreVisitedNode(node.children[1].id)\r\n\t\t\t\t}\r\n\t\t\t\t//queue left subtree with higher priority\r\n\t\t\t\tqueue.unshift(node.children[0])\r\n\t\t\t\thighlightPreVisitedNode(node.children[0].id)\r\n\t\t\t} else {\r\n\t\t\t\t//visit node\r\n\t\t\t\thighlightVisitedNode(node.id)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.error(\"Invalid traverseMode: \" + traverseMode)\r\n\t\t}\r\n\r\n\t\t//trigger recursion\r\n\t\tsetTimeout(() => {\r\n\t\t\ttraverse(queue)\r\n\t\t}, ANIMATION_TIMEOUT)\r\n\t}\r\n\r\n\tconst handleTraverseModeChange = e => {\r\n\t\tsetTraverseMode(e.target.value)\r\n\t}\r\n\r\n\tconst handleViewModeChange = e => {\r\n\t\tprops.setViewMode(e.target.value)\r\n\t}\r\n\r\n\tconst handleTraverseClick = e => {\r\n\t\ttraverse(props.nodes)\r\n\t}\r\n\r\n\tconst handleInputChange = e => {\r\n\t\t// Verify input is numeric before accepting update\r\n\t\tconst inputRegex = /(?:-?\\d*(?:\\.\\d*)?)?/\r\n\t\tconst matches = e.target.value.match(inputRegex)\r\n\r\n\t\tif (matches !== null && e.target.value.length === matches[0].length) {\r\n\t\t\tsetInputText(e.target.value)\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleKeyDown = e => {\r\n\t\tif (e.code === \"Enter\") handleInsertClick()\r\n\t}\r\n\r\n\tconst insertBSTNode = value => {\r\n\t\tif (props.nodes.length === 0) {\r\n\t\t\tlet newNode = {\r\n\t\t\t\tvalue: value,\r\n\t\t\t\tid: Math.random(),\r\n\t\t\t\tchildren: [],\r\n\t\t\t\tparentID: null,\r\n\t\t\t}\r\n\t\t\tnewNode.topOffset = 40\r\n\t\t\tnewNode.leftOffset =\r\n\t\t\t\t(document.getElementById(\"treeView\").clientWidth - 25) / 2\r\n\r\n\t\t\tprops.setNodes([newNode])\r\n\t\t} else {\r\n\t\t\tconst newNode = Utils.bstInsert(props.nodes[0], value)\r\n\r\n\t\t\tprops.setNodes([newNode])\r\n\t\t\tprops.setLines(Utils.generateLines(newNode))\r\n\t\t}\r\n\t}\r\n\r\n\tconst insertBinaryNode = value => {\r\n\t\tif (props.nodes.length === 0) {\r\n\t\t\tlet newNode = {\r\n\t\t\t\tvalue: value,\r\n\t\t\t\tid: Math.random(),\r\n\t\t\t\tchildren: [],\r\n\t\t\t\tparentID: null,\r\n\t\t\t}\r\n\t\t\tnewNode.topOffset = 40\r\n\t\t\tnewNode.leftOffset =\r\n\t\t\t\t(document.getElementById(\"treeView\").clientWidth - 25) / 2\r\n\r\n\t\t\tprops.setNodes([newNode])\r\n\t\t} else {\r\n\t\t\tconst newNode = Utils.binaryInsert(props.nodes[0], value)\r\n\r\n\t\t\tprops.setNodes([newNode])\r\n\t\t\tprops.setLines(Utils.generateLines(newNode))\r\n\t\t}\r\n\t}\r\n\r\n\tconst insertAVLNode = value => {\r\n\t\tif (props.nodes.length === 0) {\r\n\t\t\tlet newNode = {\r\n\t\t\t\tvalue: value,\r\n\t\t\t\tid: Math.random(),\r\n\t\t\t\tchildren: [],\r\n\t\t\t\tparentID: null,\r\n\t\t\t}\r\n\t\t\tnewNode.topOffset = 40\r\n\t\t\tnewNode.leftOffset =\r\n\t\t\t\t(document.getElementById(\"treeView\").clientWidth - 25) / 2\r\n\r\n\t\t\tprops.setNodes([newNode])\r\n\t\t} else {\r\n\t\t\tconst inserted = Utils.bstInsert(props.nodes[0], value)\r\n\t\t\tconst newNode = Utils.avlBalance(inserted)\r\n\r\n\t\t\tprops.setNodes([newNode])\r\n\t\t\tprops.setLines(Utils.generateLines(newNode))\r\n\t\t}\r\n\t}\r\n\r\n\tconst insertCustomNode = value => {\r\n\t\tlet newNode = {\r\n\t\t\tvalue: value,\r\n\t\t\tid: Math.random(),\r\n\t\t\tchildren: [],\r\n\t\t\tparentID: null,\r\n\t\t}\r\n\r\n\t\tif (props.nodes.length === 0) {\r\n\t\t\tnewNode.topOffset = 40\r\n\t\t\tnewNode.leftOffset =\r\n\t\t\t\t(document.getElementById(\"treeView\").clientWidth - 25) / 2\r\n\r\n\t\t\tprops.setNodes([newNode])\r\n\t\t} else {\r\n\t\t\tlet allNodes = []\r\n\t\t\tprops.nodes.forEach(tree =>\r\n\t\t\t\tallNodes.push(...Utils.flattenTree(tree))\r\n\t\t\t)\r\n\t\t\t// Check for duplicate entry attempt\r\n\t\t\tif (\r\n\t\t\t\tallNodes.reduce(\r\n\t\t\t\t\t(rsf, node) => rsf || node.value === value,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\t// TODO: Handle duplicate node entry attempt with animation\r\n\t\t\t\tconsole.log(\"Attempted duplicate entry\")\r\n\t\t\t} else {\r\n\t\t\t\tconst treeViewBox = document\r\n\t\t\t\t\t.getElementById(\"treeView\")\r\n\t\t\t\t\t.getBoundingClientRect()\r\n\t\t\t\tnewNode.topOffset =\r\n\t\t\t\t\tprops.nodes[props.nodes.length - 1].topOffset\r\n\t\t\t\tnewNode.leftOffset = Utils.dimensionClamp(\r\n\t\t\t\t\tprops.nodes[props.nodes.length - 1].leftOffset + 80,\r\n\t\t\t\t\ttreeViewBox.left,\r\n\t\t\t\t\ttreeViewBox.right - 50\r\n\t\t\t\t)\r\n\t\t\t\tprops.setNodes([...props.nodes, newNode])\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst handleInsertClick = () => {\r\n\t\tif (inputText === \"\" || inputText === \"-\") return\r\n\r\n\t\t// Update the tree nodes\r\n\t\tif (props.viewMode === \"bst\") {\r\n\t\t\tinsertBSTNode(+inputText)\r\n\t\t} else if (props.viewMode === \"binary\") {\r\n\t\t\tinsertBinaryNode(+inputText)\r\n\t\t} else if (props.viewMode === \"avl\") {\r\n\t\t\tinsertAVLNode(+inputText)\r\n\t\t} else if (props.viewMode === \"custom\") {\r\n\t\t\tinsertCustomNode(+inputText)\r\n\t\t}\r\n\t\t// Clear the input text bar\r\n\t\tsetInputText(\"\")\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"topBar\">\r\n\t\t\t<div id=\"input\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName=\"topRow\"\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tonKeyDown={handleKeyDown}\r\n\t\t\t\t\tvalue={inputText}\r\n\t\t\t\t\tplaceholder=\"Enter node value (ex. 4, 53)\"\r\n\t\t\t\t/>\r\n\t\t\t\t<button className=\"topRow\" onClick={handleInsertClick}>\r\n\t\t\t\t\tInsert\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div id=\"traverse\">\r\n\t\t\t\t<select\r\n\t\t\t\t\tname=\"traverseMode\"\r\n\t\t\t\t\tvalue={traverseMode}\r\n\t\t\t\t\tonChange={handleTraverseModeChange}\r\n\t\t\t\t\tclassName=\"topRow\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<option value=\"pre-order\">Pre-order traversal</option>\r\n\t\t\t\t\t<option value=\"in-order\">In-order traversal</option>\r\n\t\t\t\t\t<option value=\"post-order\">Post-order traversal</option>\r\n\t\t\t\t</select>\r\n\t\t\t\t<button className=\"topRow\" onClick={handleTraverseClick}>\r\n\t\t\t\t\tTraverse\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<select\r\n\t\t\t\tname=\"treeMode\"\r\n\t\t\t\tvalue={props.viewMode}\r\n\t\t\t\tonChange={handleViewModeChange}\r\n\t\t\t\tclassName=\"topRow\"\r\n\t\t\t>\r\n\t\t\t\t<option value=\"avl\">Tree format: AVL</option>\r\n\t\t\t\t<option value=\"binary\">Tree format: Binary</option>\r\n\t\t\t\t<option value=\"bst\">Tree format: BST</option>\r\n\t\t\t\t<option value=\"custom\">Tree format: Custom</option>\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TopBar\r\n","import React from \"react\"\r\n\r\nconst StatsPanel = props => {\r\n\treturn (\r\n\t\t<div id=\"statsPanel\">\r\n\t\t\t<div className=\"topBar\"></div>\r\n\t\t\t<div id=\"innerStatsPanel\">\r\n\t\t\t\t{props.viewMode === \"avl\" && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/AVL_tree\"\r\n\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<strong>AVL tree</strong> (Adelson-Velsky and Landis\r\n\t\t\t\t\t\t\ttree)\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tBinary search tree that automatically balances\r\n\t\t\t\t\t\t\t\titself to optimize random operations\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tAuto-balancing is done through rotations to\r\n\t\t\t\t\t\t\t\tensure that each subtree of a node has similar\r\n\t\t\t\t\t\t\t\theight\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tEnsuring that subtrees are similar in height\r\n\t\t\t\t\t\t\t\treduces the difference between average and worst\r\n\t\t\t\t\t\t\t\tcase operations and optimizes overall\r\n\t\t\t\t\t\t\t\tperformance\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tOperations are conducted similarly to those on\r\n\t\t\t\t\t\t\t\tregular binary search trees, except the tree is\r\n\t\t\t\t\t\t\t\tchecked for balance after\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tRotations are performed by lifting the taller\r\n\t\t\t\t\t\t\t\tsubtree to the parent's spot, and then inserting\r\n\t\t\t\t\t\t\t\tthe parent into the subtree\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tDuplicate values aren't allowed for simplicity\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tEnter numerical values in the box at the top and\r\n\t\t\t\t\t\t\t\tpress \"Insert\" to create nodes in the space to\r\n\t\t\t\t\t\t\t\tthe left\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Operation</th>\r\n\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\tAverage case (\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Big_O_notation\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tbig Θ\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\tWorst case (\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Big_O_notation\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tbig O\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t<th>Measure</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Insert</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>O(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Search</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>O(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Delete</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>O(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Space</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(n)</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Memory</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t{props.viewMode === \"binary\" && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Binary_tree\"\r\n\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<strong>Binary tree</strong>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t<li>Each node can have up to two children</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tBinary trees offer useful structure for\r\n\t\t\t\t\t\t\t\trepresenting data, but could be more efficient\r\n\t\t\t\t\t\t\t\tto operate on\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tEnter numerical values in the box at the top and\r\n\t\t\t\t\t\t\t\tpress \"Insert\" to create nodes in the space to\r\n\t\t\t\t\t\t\t\tthe left\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Operation</th>\r\n\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\tAverage case (\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Big_O_notation\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tbig Θ\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\tWorst case (\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Big_O_notation\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tbig O\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t<th>Measure</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Insert</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Search</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(n)</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Delete</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(n)</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Space</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(n)</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Memory</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t{props.viewMode === \"bst\" && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Binary_search_tree\"\r\n\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<strong>BST</strong> (Binary search tree)\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t<li>Binary tree sorted to speed up operations</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tNew nodes are inserted to the left of a parent\r\n\t\t\t\t\t\t\t\tnode if the value is less than the parent's and\r\n\t\t\t\t\t\t\t\tto the right if the value is greater than the\r\n\t\t\t\t\t\t\t\tparent's\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tThis means all nodes in a parent's left subtree\r\n\t\t\t\t\t\t\t\thave lesser value and all nodes in the right\r\n\t\t\t\t\t\t\t\tsubtree have greater value\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tThis sorting allows algorithms to follow a path\r\n\t\t\t\t\t\t\t\tdown the tree, which is more efficient than\r\n\t\t\t\t\t\t\t\toperating on every node\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tDuplicate values aren't allowed for simplicity\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tEnter numerical values in the box at the top and\r\n\t\t\t\t\t\t\t\tpress \"Insert\" to create nodes in the space to\r\n\t\t\t\t\t\t\t\tthe left\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Operation</th>\r\n\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\tAverage case (\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Big_O_notation\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tbig Θ\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\tWorst case (\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Big_O_notation\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tbig O\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t<th>Measure</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Insert</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Search</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Delete</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(log(n))</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Space</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(n)</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Memory</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t{props.viewMode === \"custom\" && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Tree_(data_structure)\"\r\n\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<strong>Custom tree</strong>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t<li>Make your own tree!</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tEnter numerical values in the box at the top and\r\n\t\t\t\t\t\t\t\tpress \"Insert\" to create nodes in the space to\r\n\t\t\t\t\t\t\t\tthe left\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tConnect these nodes with a line by dragging the\r\n\t\t\t\t\t\t\t\thandles onto other nodes\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tThese lines represent the relationships (child,\r\n\t\t\t\t\t\t\t\tparent) between nodes in the tree\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tRemove a line between two nodes by clicking on\r\n\t\t\t\t\t\t\t\tit\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\tRemove a node (and all its children) by clicking\r\n\t\t\t\t\t\t\t\ton it\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>Operation</th>\r\n\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\tAverage case (\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Big_O_notation\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tbig Θ\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t\tWorst case (\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref=\"https://en.wikipedia.org/wiki/Big_O_notation\"\r\n\t\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\t\t\t\trel=\"noreferrer noopener\"\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tbig O\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t<th>Measure</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Insert</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\tΘ(1) (manual) / <br />\r\n\t\t\t\t\t\t\t\t\tΘ(n) (automated)\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\tO(1) (manual) / <br />\r\n\t\t\t\t\t\t\t\t\tO(n) (automated)\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Search</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(n)</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Delete</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(n)</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Time</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Space</td>\r\n\t\t\t\t\t\t\t\t<td>Θ(n)</td>\r\n\t\t\t\t\t\t\t\t<td>O(n)</td>\r\n\t\t\t\t\t\t\t\t<td>Memory</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default StatsPanel\r\n","import \"./App.css\"\r\nimport Tree from \"./Tree\"\r\nimport TopBar from \"./TopBar\"\r\nimport StatsPanel from \"./StatsPanel\"\r\nimport { DndProvider } from \"react-dnd\"\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\"\r\nimport React, { useState } from \"react\"\r\n\r\nexport const DragTypes = {\r\n\tNODE: \"node\",\r\n\tTOP_HANDLE: \"top_handle\",\r\n\tBOTTOM_HANDLE: \"bottom_handle\",\r\n}\r\n\r\nconst App = () => {\r\n\tconst [nodes, setNodes] = useState([])\r\n\tconst [lines, setLines] = useState([])\r\n\tconst [viewMode, setViewMode] = useState(\"bst\")\r\n\r\n\treturn (\r\n\t\t<DndProvider backend={HTML5Backend}>\r\n\t\t\t<div id=\"topBarBackground\"></div>\r\n\t\t\t<div>\r\n\t\t\t\t<TopBar\r\n\t\t\t\t\tnodes={nodes}\r\n\t\t\t\t\tsetNodes={setNodes}\r\n\t\t\t\t\tlines={lines}\r\n\t\t\t\t\tsetLines={setLines}\r\n\t\t\t\t\tviewMode={viewMode}\r\n\t\t\t\t\tsetViewMode={setViewMode}\r\n\t\t\t\t/>\r\n\t\t\t\t<Tree\r\n\t\t\t\t\tnodes={nodes}\r\n\t\t\t\t\tsetNodes={setNodes}\r\n\t\t\t\t\tlines={lines}\r\n\t\t\t\t\tsetLines={setLines}\r\n\t\t\t\t\tviewMode={viewMode}\r\n\t\t\t\t\tsetViewMode={setViewMode}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<StatsPanel viewMode={viewMode} />\r\n\t\t</DndProvider>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom/client\"\r\nimport App from \"./App\"\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"))\r\nroot.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>\r\n)\r\n"],"sourceRoot":""}